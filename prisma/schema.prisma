generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(cuid())
  walletAddress   String     // Primary wallet address (could be either network)
  network         String     @default("solana") // "ethereum" or "solana"
  ethereumAddress String?    // Optional separate Ethereum address
  solanaAddress   String?    // Optional separate Solana address
  email           String?    
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  points          Int        @default(0)
  streak          Int        @default(0)
  lastCheckIn     DateTime?
  messages        Message[]
  stakes          Stake[]
  checkIns        CheckIn[]
  pointsHistory   Json?      // For storing historical point data

  @@unique([walletAddress, network]) // Ensure uniqueness per network
}

model Message {
  id        String   @id @default(cuid())
  content   String
  signature String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stake {
  id         String   @id @default(cuid())
  amount     Int
  startDate  DateTime @default(now())
  endDate    DateTime
  isActive   Boolean  @default(true)
  signature  String
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CheckIn {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  points    Int      @default(10)  // Base points earned for this check-in
  signature String   // Signature from the wallet
  network   String   // "ethereum" or "solana"
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}